{"version":3,"sources":["animation.js"],"names":["animate","change","time","start","performance","now","getMoment","Promise","resolve","onRender","moment","window","removeEventListener","addEventListener","createIcosahedronAnimation","icosahedron","setTextures","dat","rotation","x","Math","random","y","z","startX","startY","startZ","coffX","coffY","coffZ","sin","PI","set","createDragAnimation","group","position","createAnimator","animateIcosahedron","drag","round"],"mappings":"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","file":"animation.7bfd2d21.js","sourceRoot":"..","sourcesContent":["function animate(change, time) {\n    const start = performance.now()\n    const getMoment = () => (performance.now() - start) / time\n\n    return new Promise((resolve) => {\n        function onRender() {\n            const moment = getMoment()\n\n            if (moment < 1) {\n                change(moment)\n            } else {\n                change(1)\n                window.removeEventListener('render', onRender)\n                resolve()\n            }\n        }\n\n        window.addEventListener('render', onRender)\n    })\n\n}\n\nfunction createIcosahedronAnimation(icosahedron, setTextures) {\n    return async () => {\n        await animate(dat => {\n            icosahedron.rotation.x += (Math.random() - 0.1) / 10\n            icosahedron.rotation.y += (Math.random() - 0.1) / 10\n            icosahedron.rotation.z += (Math.random() - 0.1) / 10\n        }, 1500)\n\n        let startX = icosahedron.rotation.x;\n        let startY = icosahedron.rotation.y;\n        let startZ = icosahedron.rotation.z;\n\n        setTextures(icosahedron)\n\n        let coffX = 0.35 - icosahedron.rotation.x;\n        let coffY = -3.08 - icosahedron.rotation.y;\n        let coffZ = -1.55 - icosahedron.rotation.z;\n\n        await animate(dat => {\n            icosahedron.rotation.x = startX + coffX * Math.sin(dat * Math.PI / 2)\n            icosahedron.rotation.y = startY + coffY * Math.sin(dat * Math.PI / 2)\n            icosahedron.rotation.z = startZ + coffZ * Math.sin(dat * Math.PI / 2)\n        }, 750)\n\n        \n        icosahedron.rotation.set(0.35, -3.08, -1.55)\n    }\n}\n\nfunction createDragAnimation(group) {\n    return async () => {\n        await animate(dat => {\n            group.position.x = -10 * dat\n            group.position.y = -10 * dat\n        }, 125)\n\n        await animate(dat => {\n            group.position.x = -10 * (1 - dat)\n            group.position.y = -10 * (1 - dat)\n        }, 125)\n    }\n}\n\nfunction createAnimator(group, icosahedron, setTextures) {\n    let animateIcosahedron = createIcosahedronAnimation(icosahedron, setTextures)\n    let drag = createDragAnimation(group)\n    return async () => {\n        animateIcosahedron()\n\n        if (Math.round(group.rotation.y) == 3) {\n            await animate(dat => {\n                group.rotation.y = Math.PI * (1 + dat)\n            }, 750)\n        }\n\n        await drag()\n        await drag()\n\n        animate(dat => {\n            group.rotation.y = Math.PI * dat\n        }, 750)\n    }\n}"]}